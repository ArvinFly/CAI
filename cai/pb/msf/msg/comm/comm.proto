syntax = "proto2";
package msf.msg.comm;

// msf/msgcomm/msg_comm.java

import "cai/pb/im/msg/msg_body/msg_body.proto";
import "cai/pb/im/msg/msg_head/msg_head.proto";

message AppShareInfo {
  optional uint32 appshareId = 1;
  optional bytes appshareCookie = 2;
  optional PluginInfo appshareResource = 3;
}

message C2CTmpMsgHead {
  optional uint32 c2CType = 1;
  optional uint32 serviceType = 2;
  optional uint64 groupUin = 3;
  optional uint64 groupCode = 4;
  optional bytes sig = 5;
  optional uint32 sigType = 6;
  optional string fromPhone = 7;
  optional string toPhone = 8;
  optional uint32 lockDisplay = 9;
  optional uint32 directionFlag = 10;
  optional bytes reserved = 11;
  optional bytes businessName = 14;
  optional bytes businessSubContent = 15;
}

message ContentHead {
  optional uint32 pkgNum = 1;
  optional uint32 pkgIndex = 2;
  optional uint32 divSeq = 3;
  optional uint32 autoReply = 4;
}

message DiscussInfo {
  optional uint64 discussUin = 1;
  optional uint32 discussType = 2;
  optional uint64 discussInfoSeq = 3;
  optional bytes discussRemark = 4;
  optional bytes discussName = 5;
}

message ExtGroupKeyInfo {
  optional uint32 curMaxSeq = 1;
  optional uint64 curTime = 2;
  optional uint32 operateByParents = 3;
  optional bytes extGroupInfo = 4;
}

message GroupInfo {
  optional uint64 groupCode = 1;
  optional uint32 groupType = 2;
  optional uint64 groupInfoSeq = 3;
  optional bytes groupCard = 4;
  optional bytes groupRank = 5;
  optional uint32 groupLevel = 6;
  optional uint32 groupCardType = 7;
  optional bytes groupName = 8;
}

message Msg {
  optional MsgHead head = 1;
  optional ContentHead contentHead = 2;
  optional im.msg.msg_body.MsgBody body = 3;
  optional AppShareInfo appshareInfo = 4;
}

message MsgHead {
  optional uint64 fromUin = 1;
  optional uint64 toUin = 2;
  optional uint32 type = 3;
  optional uint32 c2CCmd = 4;
  optional uint32 seq = 5;
  optional uint32 time = 6;
  optional uint64 uid = 7;
  optional C2CTmpMsgHead c2CTmpMsgHead = 8;
  optional GroupInfo groupInfo = 9;
  optional uint32 fromAppid = 10;
  optional uint32 fromInstid = 11;
  optional uint32 userActive = 12;
  optional DiscussInfo discussInfo = 13;
  optional string fromNick = 14;
  optional uint64 authUin = 15;
  optional string authNick = 16;
  optional uint32 flag = 17;
  optional string authRemark = 18;
  optional string groupName = 19;
  optional MutilTransHead mutiltransHead = 20;
  optional im.msg.msg_head.InstCtrl instCtrl = 21;
  optional uint32 publicAccountGroupSendFlag = 22;
  optional uint32 wseqInC2CMsghead = 23;
  optional uint64 cpid = 24;
  optional ExtGroupKeyInfo extGroupKeyInfo = 25;
  optional string multiCompatibleText = 26;
  optional uint32 authSex = 27;
  optional bool isSrcMsg = 28;
}

message MsgType0x210 {
  optional uint32 subMsgType = 1;
  optional bytes content = 2;
}

message MutilTransHead {
  optional uint32 status = 1;
  optional uint32 msgId = 2;
}

message PluginInfo {
  optional uint32 resId = 1;
  optional string pkgName = 2;
  optional uint32 newVer = 3;
  optional uint32 resType = 4;
  optional uint32 lanType = 5;
  optional uint32 priority = 6;
  optional string resName = 7;
  optional string resDesc = 8;
  optional string resUrlBig = 9;
  optional string resUrlSmall = 10;
  optional string resConf = 11;
}

message Uin2Nick {
  optional uint64 uin = 1;
  optional string nick = 2;
}

message UinPairMsg {
  optional uint32 lastReadTime = 1;
  optional uint64 peerUin = 2;
  optional uint32 completed = 3;
  repeated Msg msg = 4;
  optional uint32 unreadMsgNum = 5;
  optional uint32 c2CType = 8;
  optional uint32 serviceType = 9;
  optional bytes pbReserve = 10;
  optional uint64 toTinyId = 11;
}
