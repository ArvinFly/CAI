"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
from builtins import (
    bool,
    bytes,
    int,
)

from cai.pb.im.msg.common.common_pb2 import (
    GroupInfo,
    Token,
    User,
)

from cai.pb.im.msg.msg_body.msg_body_pb2 import (
    MsgBody,
)

from google.protobuf.descriptor import (
    Descriptor,
    FileDescriptor,
)

from google.protobuf.message import (
    Message,
)

from typing import (
    Optional,
)

from typing_extensions import (
    Literal,
)


DESCRIPTOR: FileDescriptor = ...

class C2C(Message):
    DESCRIPTOR: Descriptor = ...
    SENDER_FIELD_NUMBER: int
    RECEIVER_FIELD_NUMBER: int
    C2CRELATION_FIELD_NUMBER: int

    @property
    def sender(self) -> User: ...

    @property
    def receiver(self) -> User: ...

    @property
    def c2CRelation(self) -> C2CRelation: ...

    def __init__(self,
        *,
        sender : Optional[User] = ...,
        receiver : Optional[User] = ...,
        c2CRelation : Optional[C2CRelation] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"c2CRelation",b"c2CRelation",u"receiver",b"receiver",u"sender",b"sender"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"c2CRelation",b"c2CRelation",u"receiver",b"receiver",u"sender",b"sender"]) -> None: ...

class C2CRelation(Message):
    DESCRIPTOR: Descriptor = ...
    C2CTYPE_FIELD_NUMBER: int
    GROUPINFO_FIELD_NUMBER: int
    TOKEN_FIELD_NUMBER: int
    c2CType: int = ...

    @property
    def groupInfo(self) -> GroupInfo: ...

    @property
    def token(self) -> Token: ...

    def __init__(self,
        *,
        c2CType : Optional[int] = ...,
        groupInfo : Optional[GroupInfo] = ...,
        token : Optional[Token] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"c2CType",b"c2CType",u"groupInfo",b"groupInfo",u"token",b"token"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"c2CType",b"c2CType",u"groupInfo",b"groupInfo",u"token",b"token"]) -> None: ...

class ContentHead(Message):
    DESCRIPTOR: Descriptor = ...
    PKGNUM_FIELD_NUMBER: int
    PKGINDEX_FIELD_NUMBER: int
    SEQ_FIELD_NUMBER: int
    DATETIME_FIELD_NUMBER: int
    TYPE_FIELD_NUMBER: int
    DIVSEQ_FIELD_NUMBER: int
    MSGDBUIN_FIELD_NUMBER: int
    MSGDBSEQ_FIELD_NUMBER: int
    WORDMSGSEQ_FIELD_NUMBER: int
    RAND_FIELD_NUMBER: int
    pkgNum: int = ...
    pkgIndex: int = ...
    seq: int = ...
    dateTime: int = ...
    type: int = ...
    divSeq: int = ...
    msgdbUin: int = ...
    msgdbSeq: int = ...
    wordMsgSeq: int = ...
    rand: int = ...

    def __init__(self,
        *,
        pkgNum : Optional[int] = ...,
        pkgIndex : Optional[int] = ...,
        seq : Optional[int] = ...,
        dateTime : Optional[int] = ...,
        type : Optional[int] = ...,
        divSeq : Optional[int] = ...,
        msgdbUin : Optional[int] = ...,
        msgdbSeq : Optional[int] = ...,
        wordMsgSeq : Optional[int] = ...,
        rand : Optional[int] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"dateTime",b"dateTime",u"divSeq",b"divSeq",u"msgdbSeq",b"msgdbSeq",u"msgdbUin",b"msgdbUin",u"pkgIndex",b"pkgIndex",u"pkgNum",b"pkgNum",u"rand",b"rand",u"seq",b"seq",u"type",b"type",u"wordMsgSeq",b"wordMsgSeq"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"dateTime",b"dateTime",u"divSeq",b"divSeq",u"msgdbSeq",b"msgdbSeq",u"msgdbUin",b"msgdbUin",u"pkgIndex",b"pkgIndex",u"pkgNum",b"pkgNum",u"rand",b"rand",u"seq",b"seq",u"type",b"type",u"wordMsgSeq",b"wordMsgSeq"]) -> None: ...

class Group(Message):
    DESCRIPTOR: Descriptor = ...
    SENDER_FIELD_NUMBER: int
    RECEIVER_FIELD_NUMBER: int
    GROUPINFO_FIELD_NUMBER: int

    @property
    def sender(self) -> User: ...

    @property
    def receiver(self) -> User: ...

    @property
    def groupInfo(self) -> GroupInfo: ...

    def __init__(self,
        *,
        sender : Optional[User] = ...,
        receiver : Optional[User] = ...,
        groupInfo : Optional[GroupInfo] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"groupInfo",b"groupInfo",u"receiver",b"receiver",u"sender",b"sender"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"groupInfo",b"groupInfo",u"receiver",b"receiver",u"sender",b"sender"]) -> None: ...

class Msg(Message):
    DESCRIPTOR: Descriptor = ...
    HEAD_FIELD_NUMBER: int
    BODY_FIELD_NUMBER: int

    @property
    def head(self) -> MsgHead: ...

    @property
    def body(self) -> MsgBody: ...

    def __init__(self,
        *,
        head : Optional[MsgHead] = ...,
        body : Optional[MsgBody] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"body",b"body",u"head",b"head"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"body",b"body",u"head",b"head"]) -> None: ...

class MsgHead(Message):
    DESCRIPTOR: Descriptor = ...
    ROUTINGHEAD_FIELD_NUMBER: int
    CONTENTHEAD_FIELD_NUMBER: int
    GBKTMPMSGBODY_FIELD_NUMBER: int
    gbkTmpMsgBody: bytes = ...

    @property
    def routingHead(self) -> RoutingHead: ...

    @property
    def contentHead(self) -> ContentHead: ...

    def __init__(self,
        *,
        routingHead : Optional[RoutingHead] = ...,
        contentHead : Optional[ContentHead] = ...,
        gbkTmpMsgBody : Optional[bytes] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"contentHead",b"contentHead",u"gbkTmpMsgBody",b"gbkTmpMsgBody",u"routingHead",b"routingHead"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"contentHead",b"contentHead",u"gbkTmpMsgBody",b"gbkTmpMsgBody",u"routingHead",b"routingHead"]) -> None: ...

class MsgSendReq(Message):
    DESCRIPTOR: Descriptor = ...
    MSG_FIELD_NUMBER: int
    BUMSG_FIELD_NUMBER: int
    TAILID_FIELD_NUMBER: int
    CONNMSGFLAG_FIELD_NUMBER: int
    COOKIE_FIELD_NUMBER: int
    buMsg: bytes = ...
    tailId: int = ...
    connMsgFlag: int = ...
    cookie: bytes = ...

    @property
    def msg(self) -> Msg: ...

    def __init__(self,
        *,
        msg : Optional[Msg] = ...,
        buMsg : Optional[bytes] = ...,
        tailId : Optional[int] = ...,
        connMsgFlag : Optional[int] = ...,
        cookie : Optional[bytes] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"buMsg",b"buMsg",u"connMsgFlag",b"connMsgFlag",u"cookie",b"cookie",u"msg",b"msg",u"tailId",b"tailId"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"buMsg",b"buMsg",u"connMsgFlag",b"connMsgFlag",u"cookie",b"cookie",u"msg",b"msg",u"tailId",b"tailId"]) -> None: ...

class MsgSendResp(Message):
    DESCRIPTOR: Descriptor = ...

    def __init__(self,
        ) -> None: ...

class RoutingHead(Message):
    DESCRIPTOR: Descriptor = ...
    C2C_FIELD_NUMBER: int
    GROUP_FIELD_NUMBER: int

    @property
    def c2C(self) -> C2C: ...

    @property
    def group(self) -> Group: ...

    def __init__(self,
        *,
        c2C : Optional[C2C] = ...,
        group : Optional[Group] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"c2C",b"c2C",u"group",b"group"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"c2C",b"c2C",u"group",b"group"]) -> None: ...
