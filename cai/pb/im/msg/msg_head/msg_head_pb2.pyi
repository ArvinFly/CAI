"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
from builtins import (
    bool,
    bytes,
    int,
)

from google.protobuf.descriptor import (
    Descriptor,
    FileDescriptor,
)

from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer,
)

from google.protobuf.message import (
    Message,
)

from typing import (
    Iterable,
    Optional,
    Text,
)

from typing_extensions import (
    Literal,
)


DESCRIPTOR: FileDescriptor = ...

class C2CHead(Message):
    DESCRIPTOR: Descriptor = ...
    TOUIN_FIELD_NUMBER: int
    FROMUIN_FIELD_NUMBER: int
    CCTYPE_FIELD_NUMBER: int
    CCCMD_FIELD_NUMBER: int
    AUTHPICSIG_FIELD_NUMBER: int
    AUTHSIG_FIELD_NUMBER: int
    AUTHBUF_FIELD_NUMBER: int
    SERVERTIME_FIELD_NUMBER: int
    CLIENTTIME_FIELD_NUMBER: int
    RAND_FIELD_NUMBER: int
    PHONENUMBER_FIELD_NUMBER: int
    toUin: int = ...
    fromUin: int = ...
    ccType: int = ...
    ccCmd: int = ...
    authPicSig: bytes = ...
    authSig: bytes = ...
    authBuf: bytes = ...
    serverTime: int = ...
    clientTime: int = ...
    rand: int = ...
    phoneNumber: Text = ...

    def __init__(self,
        *,
        toUin : Optional[int] = ...,
        fromUin : Optional[int] = ...,
        ccType : Optional[int] = ...,
        ccCmd : Optional[int] = ...,
        authPicSig : Optional[bytes] = ...,
        authSig : Optional[bytes] = ...,
        authBuf : Optional[bytes] = ...,
        serverTime : Optional[int] = ...,
        clientTime : Optional[int] = ...,
        rand : Optional[int] = ...,
        phoneNumber : Optional[Text] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"authBuf",b"authBuf",u"authPicSig",b"authPicSig",u"authSig",b"authSig",u"ccCmd",b"ccCmd",u"ccType",b"ccType",u"clientTime",b"clientTime",u"fromUin",b"fromUin",u"phoneNumber",b"phoneNumber",u"rand",b"rand",u"serverTime",b"serverTime",u"toUin",b"toUin"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"authBuf",b"authBuf",u"authPicSig",b"authPicSig",u"authSig",b"authSig",u"ccCmd",b"ccCmd",u"ccType",b"ccType",u"clientTime",b"clientTime",u"fromUin",b"fromUin",u"phoneNumber",b"phoneNumber",u"rand",b"rand",u"serverTime",b"serverTime",u"toUin",b"toUin"]) -> None: ...

class CSHead(Message):
    DESCRIPTOR: Descriptor = ...
    UIN_FIELD_NUMBER: int
    COMMAND_FIELD_NUMBER: int
    SEQ_FIELD_NUMBER: int
    VERSION_FIELD_NUMBER: int
    RETRYTIMES_FIELD_NUMBER: int
    CLIENTTYPE_FIELD_NUMBER: int
    PUBNO_FIELD_NUMBER: int
    LOCALID_FIELD_NUMBER: int
    TIMEZONE_FIELD_NUMBER: int
    CLIENTIP_FIELD_NUMBER: int
    CLIENTPORT_FIELD_NUMBER: int
    CONNIP_FIELD_NUMBER: int
    CONNPORT_FIELD_NUMBER: int
    INTERFACEIP_FIELD_NUMBER: int
    INTERFACEPORT_FIELD_NUMBER: int
    ACTUALIP_FIELD_NUMBER: int
    FLAG_FIELD_NUMBER: int
    TIMESTAMP_FIELD_NUMBER: int
    SUBCMD_FIELD_NUMBER: int
    RESULT_FIELD_NUMBER: int
    APPID_FIELD_NUMBER: int
    INSTANCEID_FIELD_NUMBER: int
    SESSIONID_FIELD_NUMBER: int
    IDCID_FIELD_NUMBER: int
    uin: int = ...
    command: int = ...
    seq: int = ...
    version: int = ...
    retryTimes: int = ...
    clientType: int = ...
    pubno: int = ...
    localid: int = ...
    timezone: int = ...
    clientIp: int = ...
    clientPort: int = ...
    connIp: int = ...
    connPort: int = ...
    interfaceIp: int = ...
    interfacePort: int = ...
    actualIp: int = ...
    flag: int = ...
    timestamp: int = ...
    subcmd: int = ...
    result: int = ...
    appId: int = ...
    instanceId: int = ...
    sessionId: int = ...
    idcId: int = ...

    def __init__(self,
        *,
        uin : Optional[int] = ...,
        command : Optional[int] = ...,
        seq : Optional[int] = ...,
        version : Optional[int] = ...,
        retryTimes : Optional[int] = ...,
        clientType : Optional[int] = ...,
        pubno : Optional[int] = ...,
        localid : Optional[int] = ...,
        timezone : Optional[int] = ...,
        clientIp : Optional[int] = ...,
        clientPort : Optional[int] = ...,
        connIp : Optional[int] = ...,
        connPort : Optional[int] = ...,
        interfaceIp : Optional[int] = ...,
        interfacePort : Optional[int] = ...,
        actualIp : Optional[int] = ...,
        flag : Optional[int] = ...,
        timestamp : Optional[int] = ...,
        subcmd : Optional[int] = ...,
        result : Optional[int] = ...,
        appId : Optional[int] = ...,
        instanceId : Optional[int] = ...,
        sessionId : Optional[int] = ...,
        idcId : Optional[int] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"actualIp",b"actualIp",u"appId",b"appId",u"clientIp",b"clientIp",u"clientPort",b"clientPort",u"clientType",b"clientType",u"command",b"command",u"connIp",b"connIp",u"connPort",b"connPort",u"flag",b"flag",u"idcId",b"idcId",u"instanceId",b"instanceId",u"interfaceIp",b"interfaceIp",u"interfacePort",b"interfacePort",u"localid",b"localid",u"pubno",b"pubno",u"result",b"result",u"retryTimes",b"retryTimes",u"seq",b"seq",u"sessionId",b"sessionId",u"subcmd",b"subcmd",u"timestamp",b"timestamp",u"timezone",b"timezone",u"uin",b"uin",u"version",b"version"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"actualIp",b"actualIp",u"appId",b"appId",u"clientIp",b"clientIp",u"clientPort",b"clientPort",u"clientType",b"clientType",u"command",b"command",u"connIp",b"connIp",u"connPort",b"connPort",u"flag",b"flag",u"idcId",b"idcId",u"instanceId",b"instanceId",u"interfaceIp",b"interfaceIp",u"interfacePort",b"interfacePort",u"localid",b"localid",u"pubno",b"pubno",u"result",b"result",u"retryTimes",b"retryTimes",u"seq",b"seq",u"sessionId",b"sessionId",u"subcmd",b"subcmd",u"timestamp",b"timestamp",u"timezone",b"timezone",u"uin",b"uin",u"version",b"version"]) -> None: ...

class DeltaHead(Message):
    DESCRIPTOR: Descriptor = ...
    TOTALLEN_FIELD_NUMBER: int
    OFFSET_FIELD_NUMBER: int
    ACKOFFSET_FIELD_NUMBER: int
    COOKIE_FIELD_NUMBER: int
    ACKCOOKIE_FIELD_NUMBER: int
    RESULT_FIELD_NUMBER: int
    FLAGS_FIELD_NUMBER: int
    totalLen: int = ...
    offset: int = ...
    ackOffset: int = ...
    cookie: bytes = ...
    ackCookie: bytes = ...
    result: int = ...
    flags: int = ...

    def __init__(self,
        *,
        totalLen : Optional[int] = ...,
        offset : Optional[int] = ...,
        ackOffset : Optional[int] = ...,
        cookie : Optional[bytes] = ...,
        ackCookie : Optional[bytes] = ...,
        result : Optional[int] = ...,
        flags : Optional[int] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"ackCookie",b"ackCookie",u"ackOffset",b"ackOffset",u"cookie",b"cookie",u"flags",b"flags",u"offset",b"offset",u"result",b"result",u"totalLen",b"totalLen"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"ackCookie",b"ackCookie",u"ackOffset",b"ackOffset",u"cookie",b"cookie",u"flags",b"flags",u"offset",b"offset",u"result",b"result",u"totalLen",b"totalLen"]) -> None: ...

class Head(Message):
    DESCRIPTOR: Descriptor = ...
    HEADTYPE_FIELD_NUMBER: int
    CSHEAD_FIELD_NUMBER: int
    S2CHEAD_FIELD_NUMBER: int
    HTTPCONNHEAD_FIELD_NUMBER: int
    PAINTFLAG_FIELD_NUMBER: int
    LOGINSIG_FIELD_NUMBER: int
    DELTAHEAD_FIELD_NUMBER: int
    C2CHEAD_FIELD_NUMBER: int
    SCONNHEAD_FIELD_NUMBER: int
    INSTCTRL_FIELD_NUMBER: int
    headType: int = ...
    paintFlag: int = ...

    @property
    def csHead(self) -> CSHead: ...

    @property
    def s2CHead(self) -> S2CHead: ...

    @property
    def httpconnHead(self) -> HttpConnHead: ...

    @property
    def loginSig(self) -> LoginSig: ...

    @property
    def deltaHead(self) -> DeltaHead: ...

    @property
    def c2CHead(self) -> C2CHead: ...

    @property
    def sconnHead(self) -> SConnHead: ...

    @property
    def instCtrl(self) -> InstCtrl: ...

    def __init__(self,
        *,
        headType : Optional[int] = ...,
        csHead : Optional[CSHead] = ...,
        s2CHead : Optional[S2CHead] = ...,
        httpconnHead : Optional[HttpConnHead] = ...,
        paintFlag : Optional[int] = ...,
        loginSig : Optional[LoginSig] = ...,
        deltaHead : Optional[DeltaHead] = ...,
        c2CHead : Optional[C2CHead] = ...,
        sconnHead : Optional[SConnHead] = ...,
        instCtrl : Optional[InstCtrl] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"c2CHead",b"c2CHead",u"csHead",b"csHead",u"deltaHead",b"deltaHead",u"headType",b"headType",u"httpconnHead",b"httpconnHead",u"instCtrl",b"instCtrl",u"loginSig",b"loginSig",u"paintFlag",b"paintFlag",u"s2CHead",b"s2CHead",u"sconnHead",b"sconnHead"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"c2CHead",b"c2CHead",u"csHead",b"csHead",u"deltaHead",b"deltaHead",u"headType",b"headType",u"httpconnHead",b"httpconnHead",u"instCtrl",b"instCtrl",u"loginSig",b"loginSig",u"paintFlag",b"paintFlag",u"s2CHead",b"s2CHead",u"sconnHead",b"sconnHead"]) -> None: ...

class HttpConnHead(Message):
    DESCRIPTOR: Descriptor = ...
    UIN_FIELD_NUMBER: int
    COMMAND_FIELD_NUMBER: int
    SUBCOMMAND_FIELD_NUMBER: int
    SEQ_FIELD_NUMBER: int
    VERSION_FIELD_NUMBER: int
    RETRYTIMES_FIELD_NUMBER: int
    CLIENTTYPE_FIELD_NUMBER: int
    PUBNO_FIELD_NUMBER: int
    LOCALID_FIELD_NUMBER: int
    TIMEZONE_FIELD_NUMBER: int
    CLIENTIP_FIELD_NUMBER: int
    CLIENTPORT_FIELD_NUMBER: int
    QZHTTPIP_FIELD_NUMBER: int
    QZHTTPPORT_FIELD_NUMBER: int
    SPPIP_FIELD_NUMBER: int
    SPPPORT_FIELD_NUMBER: int
    FLAG_FIELD_NUMBER: int
    KEY_FIELD_NUMBER: int
    COMPRESSTYPE_FIELD_NUMBER: int
    ORIGINSIZE_FIELD_NUMBER: int
    ERRORCODE_FIELD_NUMBER: int
    REDIRECT_FIELD_NUMBER: int
    COMMANDID_FIELD_NUMBER: int
    SERVICECMDID_FIELD_NUMBER: int
    OIDBHEAD_FIELD_NUMBER: int
    uin: int = ...
    command: int = ...
    subCommand: int = ...
    seq: int = ...
    version: int = ...
    retryTimes: int = ...
    clientType: int = ...
    pubNo: int = ...
    localId: int = ...
    timeZone: int = ...
    clientIp: int = ...
    clientPort: int = ...
    qzhttpIp: int = ...
    qzhttpPort: int = ...
    sppIp: int = ...
    sppPort: int = ...
    flag: int = ...
    key: bytes = ...
    compressType: int = ...
    originSize: int = ...
    errorCode: int = ...
    commandId: int = ...
    serviceCmdid: int = ...

    @property
    def redirect(self) -> RedirectMsg: ...

    @property
    def oidbhead(self) -> TransOidbHead: ...

    def __init__(self,
        *,
        uin : Optional[int] = ...,
        command : Optional[int] = ...,
        subCommand : Optional[int] = ...,
        seq : Optional[int] = ...,
        version : Optional[int] = ...,
        retryTimes : Optional[int] = ...,
        clientType : Optional[int] = ...,
        pubNo : Optional[int] = ...,
        localId : Optional[int] = ...,
        timeZone : Optional[int] = ...,
        clientIp : Optional[int] = ...,
        clientPort : Optional[int] = ...,
        qzhttpIp : Optional[int] = ...,
        qzhttpPort : Optional[int] = ...,
        sppIp : Optional[int] = ...,
        sppPort : Optional[int] = ...,
        flag : Optional[int] = ...,
        key : Optional[bytes] = ...,
        compressType : Optional[int] = ...,
        originSize : Optional[int] = ...,
        errorCode : Optional[int] = ...,
        redirect : Optional[RedirectMsg] = ...,
        commandId : Optional[int] = ...,
        serviceCmdid : Optional[int] = ...,
        oidbhead : Optional[TransOidbHead] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"clientIp",b"clientIp",u"clientPort",b"clientPort",u"clientType",b"clientType",u"command",b"command",u"commandId",b"commandId",u"compressType",b"compressType",u"errorCode",b"errorCode",u"flag",b"flag",u"key",b"key",u"localId",b"localId",u"oidbhead",b"oidbhead",u"originSize",b"originSize",u"pubNo",b"pubNo",u"qzhttpIp",b"qzhttpIp",u"qzhttpPort",b"qzhttpPort",u"redirect",b"redirect",u"retryTimes",b"retryTimes",u"seq",b"seq",u"serviceCmdid",b"serviceCmdid",u"sppIp",b"sppIp",u"sppPort",b"sppPort",u"subCommand",b"subCommand",u"timeZone",b"timeZone",u"uin",b"uin",u"version",b"version"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"clientIp",b"clientIp",u"clientPort",b"clientPort",u"clientType",b"clientType",u"command",b"command",u"commandId",b"commandId",u"compressType",b"compressType",u"errorCode",b"errorCode",u"flag",b"flag",u"key",b"key",u"localId",b"localId",u"oidbhead",b"oidbhead",u"originSize",b"originSize",u"pubNo",b"pubNo",u"qzhttpIp",b"qzhttpIp",u"qzhttpPort",b"qzhttpPort",u"redirect",b"redirect",u"retryTimes",b"retryTimes",u"seq",b"seq",u"serviceCmdid",b"serviceCmdid",u"sppIp",b"sppIp",u"sppPort",b"sppPort",u"subCommand",b"subCommand",u"timeZone",b"timeZone",u"uin",b"uin",u"version",b"version"]) -> None: ...

class InstCtrl(Message):
    DESCRIPTOR: Descriptor = ...
    SENDTOINST_FIELD_NUMBER: int
    EXCLUDEINST_FIELD_NUMBER: int
    FROMINST_FIELD_NUMBER: int

    @property
    def sendToInst(self) -> RepeatedCompositeFieldContainer[InstInfo]: ...

    @property
    def excludeInst(self) -> RepeatedCompositeFieldContainer[InstInfo]: ...

    @property
    def fromInst(self) -> InstInfo: ...

    def __init__(self,
        *,
        sendToInst : Optional[Iterable[InstInfo]] = ...,
        excludeInst : Optional[Iterable[InstInfo]] = ...,
        fromInst : Optional[InstInfo] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"fromInst",b"fromInst"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"excludeInst",b"excludeInst",u"fromInst",b"fromInst",u"sendToInst",b"sendToInst"]) -> None: ...

class InstInfo(Message):
    DESCRIPTOR: Descriptor = ...
    APPPID_FIELD_NUMBER: int
    INSTID_FIELD_NUMBER: int
    PLATFORM_FIELD_NUMBER: int
    ENUMDEVICETYPE_FIELD_NUMBER: int
    apppid: int = ...
    instid: int = ...
    platform: int = ...
    enumDeviceType: int = ...

    def __init__(self,
        *,
        apppid : Optional[int] = ...,
        instid : Optional[int] = ...,
        platform : Optional[int] = ...,
        enumDeviceType : Optional[int] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"apppid",b"apppid",u"enumDeviceType",b"enumDeviceType",u"instid",b"instid",u"platform",b"platform"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"apppid",b"apppid",u"enumDeviceType",b"enumDeviceType",u"instid",b"instid",u"platform",b"platform"]) -> None: ...

class LoginSig(Message):
    DESCRIPTOR: Descriptor = ...
    TYPE_FIELD_NUMBER: int
    SIG_FIELD_NUMBER: int
    type: int = ...
    sig: bytes = ...

    def __init__(self,
        *,
        type : Optional[int] = ...,
        sig : Optional[bytes] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"sig",b"sig",u"type",b"type"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"sig",b"sig",u"type",b"type"]) -> None: ...

class RedirectMsg(Message):
    DESCRIPTOR: Descriptor = ...
    LASTREDIRECTIP_FIELD_NUMBER: int
    LASTREDIRECTPORT_FIELD_NUMBER: int
    REDIRECTIP_FIELD_NUMBER: int
    REDIRECTPORT_FIELD_NUMBER: int
    REDIRECTCOUNT_FIELD_NUMBER: int
    lastRedirectIp: int = ...
    lastRedirectPort: int = ...
    redirectIp: int = ...
    redirectPort: int = ...
    redirectCount: int = ...

    def __init__(self,
        *,
        lastRedirectIp : Optional[int] = ...,
        lastRedirectPort : Optional[int] = ...,
        redirectIp : Optional[int] = ...,
        redirectPort : Optional[int] = ...,
        redirectCount : Optional[int] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"lastRedirectIp",b"lastRedirectIp",u"lastRedirectPort",b"lastRedirectPort",u"redirectCount",b"redirectCount",u"redirectIp",b"redirectIp",u"redirectPort",b"redirectPort"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"lastRedirectIp",b"lastRedirectIp",u"lastRedirectPort",b"lastRedirectPort",u"redirectCount",b"redirectCount",u"redirectIp",b"redirectIp",u"redirectPort",b"redirectPort"]) -> None: ...

class S2CHead(Message):
    DESCRIPTOR: Descriptor = ...
    SUBMSGTYPE_FIELD_NUMBER: int
    MSGTYPE_FIELD_NUMBER: int
    FROMUIN_FIELD_NUMBER: int
    MSGID_FIELD_NUMBER: int
    RELAYIP_FIELD_NUMBER: int
    RELAYPORT_FIELD_NUMBER: int
    TOUIN_FIELD_NUMBER: int
    subMsgtype: int = ...
    msgType: int = ...
    fromUin: int = ...
    msgId: int = ...
    relayIp: int = ...
    relayPort: int = ...
    toUin: int = ...

    def __init__(self,
        *,
        subMsgtype : Optional[int] = ...,
        msgType : Optional[int] = ...,
        fromUin : Optional[int] = ...,
        msgId : Optional[int] = ...,
        relayIp : Optional[int] = ...,
        relayPort : Optional[int] = ...,
        toUin : Optional[int] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"fromUin",b"fromUin",u"msgId",b"msgId",u"msgType",b"msgType",u"relayIp",b"relayIp",u"relayPort",b"relayPort",u"subMsgtype",b"subMsgtype",u"toUin",b"toUin"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"fromUin",b"fromUin",u"msgId",b"msgId",u"msgType",b"msgType",u"relayIp",b"relayIp",u"relayPort",b"relayPort",u"subMsgtype",b"subMsgtype",u"toUin",b"toUin"]) -> None: ...

class SConnHead(Message):
    DESCRIPTOR: Descriptor = ...

    def __init__(self,
        ) -> None: ...

class TransOidbHead(Message):
    DESCRIPTOR: Descriptor = ...
    COMMAND_FIELD_NUMBER: int
    SERVICETYPE_FIELD_NUMBER: int
    RESULT_FIELD_NUMBER: int
    ERRORMSG_FIELD_NUMBER: int
    command: int = ...
    serviceType: int = ...
    result: int = ...
    errorMsg: Text = ...

    def __init__(self,
        *,
        command : Optional[int] = ...,
        serviceType : Optional[int] = ...,
        result : Optional[int] = ...,
        errorMsg : Optional[Text] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"command",b"command",u"errorMsg",b"errorMsg",u"result",b"result",u"serviceType",b"serviceType"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"command",b"command",u"errorMsg",b"errorMsg",u"result",b"result",u"serviceType",b"serviceType"]) -> None: ...
